/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 7, 2019 at 3:16:25 AM Pacific Standard Time
* Operating System: Version 13.2.3 (Build 17B111)
* Image Source: /System/Library/Frameworks/ARKit.framework/ARKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLTexture;
#import <ARKit/ARKit-Structs.h>
@class MTLRenderPassDescriptor;

@interface ARPresentationTarget : NSObject {

	long long _eyeLocation;
	id<MTLTexture> _colorTexture;
	id<MTLTexture> _depthTexture;
	MTLRenderPassDescriptor* _renderPassDescriptor;
	double _warpCameraMatrixTimestamp;
	double _warpCameraMatrixEndTimestamp;
	SCD_Struct_AR76 _viewport;
	SCD_Struct_AR12 _eyeTransform;
	SCD_Struct_AR12 _projectionMatrix;
	SCD_Struct_AR12 _viewMatrix;
	SCD_Struct_AR12 _warpCameraMatrix;
	SCD_Struct_AR12 _warpCameraMatrixEnd;

}

@property (assign,nonatomic) SCD_Struct_AR12 eyeTransform;                                //@synthesize eyeTransform=_eyeTransform - In the implementation block
@property (nonatomic,retain) id<MTLTexture> colorTexture;                                 //@synthesize colorTexture=_colorTexture - In the implementation block
@property (nonatomic,retain) id<MTLTexture> depthTexture;                                 //@synthesize depthTexture=_depthTexture - In the implementation block
@property (assign,nonatomic) SCD_Struct_AR76 viewport;                                    //@synthesize viewport=_viewport - In the implementation block
@property (assign,nonatomic) SCD_Struct_AR12 projectionMatrix;                            //@synthesize projectionMatrix=_projectionMatrix - In the implementation block
@property (assign,nonatomic) SCD_Struct_AR12 viewMatrix;                                  //@synthesize viewMatrix=_viewMatrix - In the implementation block
@property (assign,nonatomic) SCD_Struct_AR12 warpCameraMatrix;                            //@synthesize warpCameraMatrix=_warpCameraMatrix - In the implementation block
@property (assign,nonatomic) double warpCameraMatrixTimestamp;                            //@synthesize warpCameraMatrixTimestamp=_warpCameraMatrixTimestamp - In the implementation block
@property (assign,nonatomic) SCD_Struct_AR12 warpCameraMatrixEnd;                         //@synthesize warpCameraMatrixEnd=_warpCameraMatrixEnd - In the implementation block
@property (assign,nonatomic) double warpCameraMatrixEndTimestamp;                         //@synthesize warpCameraMatrixEndTimestamp=_warpCameraMatrixEndTimestamp - In the implementation block
@property (nonatomic,retain) MTLRenderPassDescriptor * renderPassDescriptor;              //@synthesize renderPassDescriptor=_renderPassDescriptor - In the implementation block
@property (nonatomic,readonly) long long eyeLocation;                                     //@synthesize eyeLocation=_eyeLocation - In the implementation block
-(id)description;
-(MTLRenderPassDescriptor *)renderPassDescriptor;
-(SCD_Struct_AR76)viewport;
-(void)setViewport:(SCD_Struct_AR76)arg1 ;
-(SCD_Struct_AR12)projectionMatrix;
-(id<MTLTexture>)colorTexture;
-(SCD_Struct_AR12)viewMatrix;
-(void)setViewMatrix:(SCD_Struct_AR12)arg1 ;
-(void)setProjectionMatrix:(SCD_Struct_AR12)arg1 ;
-(void)setEyeTransform:(SCD_Struct_AR12)arg1 ;
-(SCD_Struct_AR12)eyeTransform;
-(void)setRenderPassDescriptor:(MTLRenderPassDescriptor *)arg1 ;
-(void)setWarpCameraMatrix:(SCD_Struct_AR12)arg1 ;
-(void)setWarpCameraMatrixTimestamp:(double)arg1 ;
-(void)setWarpCameraMatrixEnd:(SCD_Struct_AR12)arg1 ;
-(void)setWarpCameraMatrixEndTimestamp:(double)arg1 ;
-(id<MTLTexture>)depthTexture;
-(id)initWithEyeLocation:(long long)arg1 colorTexture:(id)arg2 depthTexture:(id)arg3 ;
-(long long)eyeLocation;
-(SCD_Struct_AR12)_forwardNewMatrix:(SCD_Struct_AR12)arg1 ;
-(SCD_Struct_AR12)_inverseOldMatrix:(SCD_Struct_AR12)arg1 ;
-(SCD_Struct_AR12)_warpMatrixFromOldToNew:(SCD_Struct_AR12)arg1 oldEyeTransform:(SCD_Struct_AR12)arg2 ;
-(id)viewportDescription:(SCD_Struct_AR76)arg1 debugName:(id)arg2 ;
-(void)setColorTexture:(id<MTLTexture>)arg1 ;
-(void)setDepthTexture:(id<MTLTexture>)arg1 ;
-(void)positionalWarpTransforms:(SCD_Struct_AR12)arg1 warpStart:(SCD_Struct_AR12*)arg2 warpEnd:(SCD_Struct_AR12*)arg3 warpStartForward:(SCD_Struct_AR12*)arg4 warpStartInverse:(SCD_Struct_AR12*)arg5 ;
-(void)positionalWarpTransforms:(SCD_Struct_AR12)arg1 warpStart:(SCD_Struct_AR12*)arg2 warpEnd:(SCD_Struct_AR12*)arg3 ;
-(void)positionalWarpTransforms:(SCD_Struct_AR12)arg1 warpStartInverse:(SCD_Struct_AR12*)arg2 warpEndInverse:(SCD_Struct_AR12*)arg3 ;
-(void)rotationalWarpTransforms:(SCD_Struct_AR12)arg1 warpStart:(SCD_Struct_AR12*)arg2 warpEnd:(SCD_Struct_AR12*)arg3 ;
-(SCD_Struct_AR12)warpCameraMatrix;
-(double)warpCameraMatrixTimestamp;
-(SCD_Struct_AR12)warpCameraMatrixEnd;
-(double)warpCameraMatrixEndTimestamp;
@end

