/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 7, 2019 at 3:21:40 AM Pacific Standard Time
* Operating System: Version 13.2.3 (Build 17B111)
* Image Source: /System/Library/PrivateFrameworks/WebCore.framework/Frameworks/libwebrtc.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder> > {
	VideoDecoder __value_;
} compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder> >;

typedef struct unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder> > {
	compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder> > __ptr_;
} unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder> >;

typedef struct __CVBuffer* CVBufferRef;

typedef struct scoped_refptr<webrtc::I420BufferInterface> {
	I420BufferInterface ptr_;
} scoped_refptr<webrtc::I420BufferInterface>;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct OpaqueCMMemoryPool* OpaqueCMMemoryPoolRef;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct _compressed_pair<webrtc::BitrateAdjuster *, std::__1::default_delete<webrtc::BitrateAdjuster> > {
	BitrateAdjuster __value_;
} compressed_pair<webrtc::BitrateAdjuster *, std::__1::default_delete<webrtc::BitrateAdjuster> >;

typedef struct unique_ptr<webrtc::BitrateAdjuster, std::__1::default_delete<webrtc::BitrateAdjuster> > {
	compressed_pair<webrtc::BitrateAdjuster *, std::__1::default_delete<webrtc::BitrateAdjuster> > __ptr_;
} unique_ptr<webrtc::BitrateAdjuster, std::__1::default_delete<webrtc::BitrateAdjuster> >;

typedef struct __CFString* CFStringRef;

typedef struct OpaqueVTCompressionSession* OpaqueVTCompressionSessionRef;

typedef struct _VCPCompressionSession* VCPCompressionSessionRef;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct SpsState {
	unsigned width;
	unsigned height;
	unsigned delta_pic_order_always_zero_flag;
	unsigned separate_colour_plane_flag;
	unsigned frame_mbs_only_flag;
	unsigned log2_max_frame_num;
	unsigned log2_max_pic_order_cnt_lsb;
	unsigned pic_order_cnt_type;
	unsigned max_num_ref_frames;
	unsigned vui_params_present;
	unsigned id;
} SpsState;

typedef struct PpsState {
	BOOL bottom_field_pic_order_in_frame_present_flag;
	BOOL weighted_pred_flag;
	BOOL entropy_coding_mode_flag;
	unsigned weighted_bipred_idc;
	unsigned redundant_pic_cnt_present_flag;
	int pic_init_qp_minus26;
	unsigned id;
	unsigned sps_id;
} PpsState;

typedef struct optional<int> {
	/*function pointer*/void* ;
	char __null_state_;
	i) __val_;
	BOOL __engaged_;
} optional<int>;

typedef struct optional<webrtc::PpsParser::PpsState> {
	/*function pointer*/void* ;
	char __null_state_;
	PpsState) __val_;
	BOOL __engaged_;
} optional<webrtc::PpsParser::PpsState>;

typedef struct optional<webrtc::SpsParser::SpsState> {
	/*function pointer*/void* ;
	char __null_state_;
	SpsState) __val_;
	BOOL __engaged_;
} optional<webrtc::SpsParser::SpsState>;

typedef struct H264BitstreamParser {
	/*function pointer*/void* _vptr$H264BitstreamParser;
	optional<webrtc::SpsParser::SpsState> sps_;
	optional<webrtc::PpsParser::PpsState> pps_;
	optional<int> last_slice_qp_delta_;
} H264BitstreamParser;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __value_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct SpatialLayer {
	unsigned short width;
	unsigned short height;
	float maxFramerate;
	unsigned char numberOfTemporalLayers;
	unsigned maxBitrate;
	unsigned targetBitrate;
	unsigned minBitrate;
	unsigned qpMax;
	BOOL active;
} SpatialLayer;

typedef struct TimingFrameTriggerThresholds {
	long long delay_ms;
	unsigned short outlier_ratio_percent;
} TimingFrameTriggerThresholds;

typedef struct VideoCodecVP8 {
	int complexity;
	unsigned char numberOfTemporalLayers;
	BOOL denoisingOn;
	BOOL automaticResizeOn;
	BOOL frameDroppingOn;
	int keyFrameInterval;
} VideoCodecVP8;

typedef struct VideoCodecVP9 {
	int complexity;
	unsigned char numberOfTemporalLayers;
	BOOL denoisingOn;
	BOOL frameDroppingOn;
	int keyFrameInterval;
	BOOL adaptiveQpMode;
	BOOL automaticResizeOn;
	unsigned char numberOfSpatialLayers;
	BOOL flexibleMode;
	int interLayerPred;
} VideoCodecVP9;

typedef struct VideoCodecH264 {
	BOOL frameDroppingOn;
	int keyFrameInterval;
	char* spsData;
	unsigned long long spsLen;
	char* ppsData;
	unsigned long long ppsLen;
	int profile;
} VideoCodecH264;

typedef struct VideoCodec {
	int codecType;
	unsigned char plType;
	unsigned short width;
	unsigned short height;
	unsigned startBitrate;
	unsigned maxBitrate;
	unsigned minBitrate;
	unsigned targetBitrate;
	unsigned maxFramerate;
	BOOL active;
	unsigned qpMax;
	unsigned char numberOfSimulcastStreams;
	SpatialLayer simulcastStream[4];
	SpatialLayer spatialLayers[5];
	int mode;
	BOOL expect_encode_from_texture;
	TimingFrameTriggerThresholds timing_frame_thresholds;
	VideoCodecUnion codec_specific_;
	VideoCodecVP8 VP8;
	VideoCodecVP9 VP9;
	VideoCodecH264) H264;
} VideoCodec;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct optional<unsigned int> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<unsigned int>;

typedef struct VideoBitrateAllocation {
	unsigned sum_;
	optional<unsigned int> bitrates_[5][4];
} VideoBitrateAllocation;

typedef struct _compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder> > {
	VideoEncoder __value_;
} compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder> >;

typedef struct unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder> > {
	compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder> > __ptr_;
} unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder> >;

