/*
* This header is generated by classdump-dyld 1.0
* on Saturday, December 7, 2019 at 3:16:24 AM Pacific Standard Time
* Operating System: Version 13.2.3 (Build 17B111)
* Image Source: /System/Library/PrivateFrameworks/CoreRE.framework/CoreRE
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_dispatch_queue>;

typedef struct _compressed_pair<boost::lockfree::queue<GainRampCommand> *, std::__1::default_delete<boost::lockfree::queue<GainRampCommand> > > {
	queue<GainRampCommand> __value_;
} compressed_pair<boost::lockfree::queue<GainRampCommand> *, std::__1::default_delete<boost::lockfree::queue<GainRampCommand> > >;

typedef struct unique_ptr<boost::lockfree::queue<GainRampCommand>, std::__1::default_delete<boost::lockfree::queue<GainRampCommand> > > {
	compressed_pair<boost::lockfree::queue<GainRampCommand> *, std::__1::default_delete<boost::lockfree::queue<GainRampCommand> > > __ptr_;
} unique_ptr<boost::lockfree::queue<GainRampCommand>, std::__1::default_delete<boost::lockfree::queue<GainRampCommand> > >;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct atomic<float> {
	Af __a_;
} atomic<float>;

typedef struct shared_ptr<AudioStreamRecordingManager::StreamWriter> {
	StreamWriter __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<AudioStreamRecordingManager::StreamWriter>;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct atomic<int> {
	Ai __a_;
} atomic<int>;

typedef struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::SubscriptionLegacy> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	SubscriptionLegacy m_data;
} DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::SubscriptionLegacy>;

typedef struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::Subscription> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	Subscription m_data;
} DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::Subscription>;

typedef struct Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> > {
	DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::Subscription> m_subscriptions;
	DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >::SubscriptionLegacy> m_subscriptionsLegacy;
} Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite> >;

typedef struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::SubscriptionLegacy> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	SubscriptionLegacy m_data;
} DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::SubscriptionLegacy>;

typedef struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::Subscription> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	Subscription m_data;
} DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::Subscription>;

typedef struct Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> > {
	DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::Subscription> m_subscriptions;
	DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >::SubscriptionLegacy> m_subscriptionsLegacy;
} Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity> >;

typedef struct DynamicArray<re::IDSInvite *> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	IDSInvite m_data;
} DynamicArray<re::IDSInvite *>;

typedef struct DynamicArray<re::IDSDiscoveryView *> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	IDSDiscoveryView m_data;
} DynamicArray<re::IDSDiscoveryView *>;

typedef struct DynamicString {
	Allocator m_allocator;
	char* m_buffer;
	unsigned long long m_capacity;
	unsigned long long m_length;
} DynamicString;

typedef struct Config {
	ServiceLocator serviceLocator;
	NSObject<OS_dispatch_queue>* dispatchQueue;
	DynamicString serviceID;
} Config;

typedef struct DynamicArray<re::SharedPtr<MCProtocolHandle> > {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	SharedPtr<MCProtocolHandle> m_data;
} DynamicArray<re::SharedPtr<MCProtocolHandle> >;

typedef struct DynamicArray<unsigned char> {
	Allocator m_allocator;
	unsigned long long m_capacity;
	unsigned long long m_size;
	unsigned m_version;
	char* m_data;
} DynamicArray<unsigned char>;

